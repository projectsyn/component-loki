parameters:
  loki:
    =_metadata:
      multi_instance: true

    name: ${_instance}
    namespace:
      name: syn-loki
      create: true
      metadata: {}

    secrets:
      loki-bucket-secret:
        stringData:
          S3_ACCESS_KEY_ID: null
          S3_SECRET_ACCESS_KEY: null
          S3_ENDPOINT: null
          S3_REGION: null
    globalNodeSelector: {}

    charts:
      loki: "6.12.0"

    alerts:
      additionalRules: {}
      patchRules:
        ignoreNames: []
        patches: {}

    images:
      global:
        registry: dockerhub.vshn.net
      sidecar:
        # -- The Docker registry and image for the k8s sidecar
        registry: ${loki:images:global:registry}
        image: kiwigrid/k8s-sidecar
        tag: 1.27.5

      memcached:
        # -- Memcached Docker image repository
        registry: ${loki:images:global:registry}
        image: library/memcached
        tag: 1.6.23-alpine

      memcachedExporter:
        registry: ${loki:images:global:registry}
        image: prom/memcached-exporter
        tag: v0.14.2

    helm_values:
      loki:
        schemaConfig:
          configs:
            - from: 2024-04-01
              store: tsdb
              object_store: s3
              schema: v13
              index:
                prefix: loki_index_
                period: 24h
        ingester:
          chunk_encoding: snappy
        tracing:
          enabled: true
        querier:
          max_concurrent: 4

        storage:
          type: s3
          bucketNames:
            chunks: ${loki:name}-chunks
            ruler: ${loki:name}-ruler
            admin: ${loki:name}-loki-admin
          s3:
            # s3 URL can be used to specify the endpoint, access key, secret key, and bucket name
            #s3: s3://access_key:secret_access_key@custom_endpoint/bucket_name
            # AWS endpoint URL
            endpoint: \${S3_ENDPOINT}
            # AWS region where the S3 bucket is located
            region: \${S3_REGION}
            # AWS secret access key
            secretAccessKey: \${S3_SECRET_ACCESS_KEY}
            # AWS access key ID
            accessKeyId: \${S3_ACCESS_KEY_ID}
            # AWS signature version (e.g., v2 or v4)
            #signatureVersion: <your-signature-version>
            # Forces the path style for S3 (true/false)
            s3ForcePathStyle: true
            # Allows insecure (HTTP) connections (true/false)
            insecure: false
            # HTTP configuration settings
            http_config: {}

        podSecurityContext:
          fsGroup: null
          runAsGroup: null
          runAsUser: null

        limits_config:
          retention_period: 30d

      deploymentMode: SimpleScalable

      backend:
        nodeSelector: ${loki:globalNodeSelector}
        replicas: 3
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 0.5
            memory: 1Gi
      read:
        nodeSelector: ${loki:globalNodeSelector}      
        replicas: 2
        resources:
          limits:
            cpu: 2
            memory: 4Gi
          requests:
            cpu: 1
            memory: 3Gi        
      write:
        nodeSelector: ${loki:globalNodeSelector}      
        replicas: 3
        resources:
          limits:
            cpu: 3
            memory: 8Gi
          requests:
            cpu: 1
            memory: 4Gi

      # Disable minio storage
      minio:
        enabled: false

      # Zero out replica counts of other deployment modes
      singleBinary:
        replicas: 0

      ingester:
        nodeSelector: ${loki:globalNodeSelector}      
        replicas: 0
      querier:
        nodeSelector: ${loki:globalNodeSelector}      
        replicas: 0
      queryFrontend:
        nodeSelector: ${loki:globalNodeSelector}      
        replicas: 0
      queryScheduler:
        nodeSelector: ${loki:globalNodeSelector}      
        replicas: 0
      distributor:
        nodeSelector: ${loki:globalNodeSelector}      
        replicas: 0
      compactor:
        nodeSelector: ${loki:globalNodeSelector}      
        replicas: 0
        retention_enabled: true
      indexGateway:
        nodeSelector: ${loki:globalNodeSelector}      
        replicas: 0
      bloomCompactor:
        nodeSelector: ${loki:globalNodeSelector}      
        replicas: 0
      bloomGateway:
        nodeSelector: ${loki:globalNodeSelector}      
        replicas: 0

      rbac.pspEnabled: false
      rbac.sccEnabled: true

      gateway:
        podSecurityContext:
          fsGroup: null
          runAsGroup: null
          runAsUser: null
        ingress:
          # -- Specifies whether an ingress for the gateway should be created
          enabled: true
          annotations:
            cert-manager.io/cluster-issuer: letsencrypt-production
          hosts:
            - host: loki.example.cm
              paths:
                - path: /
                  pathType: Prefix
          tls:
            - secretName: loki-gateway-tls
              hosts:
                - loki.example.com
        basicAuth:
          # -- Enables basic authentication for the gateway
          enabled: true
          # -- The basic auth username for the gateway
          username: username
          # -- The basic auth password for the gateway
          password: verysecretpassword

      global:
        extraEnvFrom:
          - secretRef:
              name: loki-bucket-secret
        dnsService: dns-default
        dnsNamespace: openshift-dns

        image:
            # -- Overrides the Docker registry globally for all images
            registry: ${loki:images:global:registry}

      sidecar:
        image:
          # -- The Docker registry and image for the k8s sidecar
          repository: ${loki:images:sidecar:registry}/${loki:images:sidecar:image}
          tag: ${loki:images:sidecar:tag}

      memcached:
        image:
          # -- Memcached Docker image repository
          repository: ${loki:images:memcached:registry}/${loki:images:memcached:image}
          tag: ${loki:images:memcached:tag}

      memcachedExporter:
        image:
          repository: ${loki:images:memcachedExporter:registry}/${loki:images:memcachedExporter:image}
          tag: ${loki:images:memcachedExporter:tag}

      test:
        enabled: false

      lokiCanary:
        enabled: false
